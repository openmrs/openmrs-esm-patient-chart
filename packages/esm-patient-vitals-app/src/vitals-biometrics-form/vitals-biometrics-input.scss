@use '@carbon/layout';
@use '@carbon/type';
@use '@carbon/colors';
@import '@openmrs/esm-styleguide/src/vars';

.label01 {
  @include type.type-style("label-01");
}

.bodyLong01 {
  @include type.type-style("body-01");
}

.productiveHeading04 {
  @include type.type-style("heading-04");
}

.container {
  width: 11.625rem;
  border-bottom: 1px solid $ui-04;
  margin-bottom: layout.$spacing-03;
}

.label {
  @extend .label01;
  color: $text-02;
  margin-bottom: layout.$spacing-03;
}

.numberInput {
  border: none;
  @extend .productiveHeading04;
  text-align: center;
  padding: 0;
  color: $ui-05;

  // TODO: Move to styleguide overrides
  :global(.cds--number input[type="number"]) {
    border: none !important;
    text-align: center;
    @include type.type-style('heading-04');
    font-family: ibm plex sans,system-ui,-apple-system,BlinkMacSystemFont,'.sfnstext-regular',sans-serif;
    min-width: auto !important;
  }

  :global(.cds--number--nosteppers input[type="number"]) {
    padding-right: 1rem !important;
  }

  ::placeholder {
    color: $text-03;
  }
}

.inputContainer {
  @extend .productiveHeading04;
  height: 4.875rem;
  display: flex;
  justify-content: center;
  flex-direction: column;
  text-align: center;
  color: $text-02;
  background-color: $ui-01;

  &.focused {
    outline: 2px solid colors.$blue-60;

    input {
      outline: none !important;
    }

    input[data-invalid]:not(:focus) {
      outline: none;
    }

    svg {
      display: none;
    }
  }
}

:global(.omrs-breakpoint-lt-desktop) .inputContainer {
  background-color: $ui-02;
}

.inputContainer {
  &:global(.red) {
    background-color: colors.$red-20;

    input {
      background-color: colors.$red-20;
    }
  }

  &:global(.green) {
    background-color: colors.$green-20;

    input {
      background-color: colors.$green-20;
    }
  }

  &:global(.yellow) {
    background-color: colors.$yellow-10;
     input {
      background-color: colors.$yellow-10;
     }
  }
}

.numberInput {
  svg {
    display: none;
  }

  input[data-invalid]:not(:focus) {
    outline: none !important;
  }
}

.textarea {
  border: none;
  @extend .bodyLong01;
  text-align: left;

  textarea {
    border-bottom: none;

    &:focus {
      outline: none;
    }
  }
}

.centered {
  display: flex;
  flex-direction: row;
  align-items: center;
  text-align: center;
  margin: 0;
  padding: 0;
}

.unitName {
  @include type.type-style('body-compact-01');
  color: $text-02;
  margin-top: layout.$spacing-03;
}

.invalidInputError {
  max-width: 11rem;
  color: $danger;
  margin-bottom: layout.$spacing-03;
}

.layer {
  width: 100%;
}

.labelContainer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.invalidInput {
  outline: 2px solid $danger;

  &.focused {
    border: none;
  }
}

.invalidInputIcon {
  svg {
    color: $danger;
  }
}

.critical-value {
  background-color: colors.$red-10;
  .numberInput {
    svg {
      display: none;
    }

    input {
      background-color: colors.$red-10;
    }

    input[data-invalid]:not(:focus) {
      outline: none;
    }

  }
}

.critically-low, .critically-high, .low, .high {
  &::after {
    @include type.type-style('heading-compact-01');
    color: $text-02;
  }
}

.low::after {
  content: " ↓";
}

.critically-low::after {
  content: " ↓↓";
}

.high::after {
  content: " ↑";
}

.critically-high::after {
  content: " ↑↑";
}

.inputInTabletView {
  &.inputWithAbnormalValue {
    .inputContainer {
      background-color: colors.$red-20;

      .numberInput {
        input {
          background-color: colors.$red-20;
          outline: none;
        }
      }
    }
  }
}

.readonly {
  cursor: default;
}

:global(.omrs-breakpoint-lt-desktop) .readonly {
  background-color: colors.$gray-10;
}

:global(.omrs-breakpoint-gt-tablet) .readonly {
  background-color: colors.$white-0;
}
